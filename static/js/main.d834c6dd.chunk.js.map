{"version":3,"sources":["Components/Landing/Login.js","Components/Landing/Water.js","Components/Landing/Main.js","App.js","serviceWorker.js","index.js"],"names":["Login","style","backgroundColor","class","src","Water","padding","id","type","for","Main","href","height","margin","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOAceA,MAbf,WACI,OACI,yBAAKC,MAAO,CACRC,gBAAiB,QAChBC,MAAM,uDAElB,yBAAKA,MAAM,iBAAiBC,IAAI,yICsClBC,MA3Cf,WACI,OACI,yBAAKJ,MAAO,CACRC,gBAAiB,WAChBC,MAAM,oCACR,yBAAKA,MAAM,aACP,wBAAIA,MAAM,cAAV,SACX,0BAAMF,MAAO,CAACK,QAAQ,WAAYJ,gBAAgB,YAElD,yBAAKC,MAAM,OAEX,yBAAKA,MAAM,eACL,uBAAGA,MAAM,yBAAT,kBACA,2BAAOI,GAAG,cAAcC,KAAK,OAAOL,MAAM,aAC1C,2BAAOM,IAAI,eAAX,cAGF,yBAAKN,MAAM,OACX,yBAAKA,MAAM,eACT,uBAAGA,MAAM,yBAAT,kBACA,2BAAOI,GAAG,cAAcC,KAAK,WAAWL,MAAM,aAC9C,2BAAOM,IAAI,eAAX,cAIL,yBAAKN,MAAM,OACP,yBAAKA,MAAM,wBACX,uBAAGF,MAAO,CAACC,gBAAgB,WAAYC,MAAM,4DAA7C,SACA,6CACA,yBAAKA,MAAM,oDACX,uBAAGF,MAAO,CAACK,QAAQ,SAAUH,MAAM,kBAAnC,OACA,uBAAGF,MAAO,CAACK,QAAQ,SAAUH,MAAM,kBAAnC,eACA,uBAAGF,MAAO,CAACK,QAAQ,SAAUH,MAAM,kBAAnC,oBCDMO,MA9Bf,WACI,OACI,6BACA,yBAAKP,MAAM,SACX,yBAAMA,MAAM,yBACV,uBAAGQ,KAAK,IAAIR,MAAM,cAAlB,QACA,wBAAII,GAAG,aAAaJ,MAAM,8BACxB,4BAAI,uBAAGQ,KAAK,aAAR,aAKN,yBAAMR,MAAM,yBACb,yBAAKA,MAAM,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,OAIA,yBAAKF,MAAO,CAACW,OAAO,MAAOC,OAAO,SAAUV,MAAM,UAGjD,6BACE,wBAAIA,MAAM,oBAAV,0B,MCZGW,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAEP,kBAAC,IAAMC,WAAP,KAEE,kBAAC,EAAD,OAIFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d834c6dd.chunk.js","sourcesContent":["import React from 'react';\r\nfunction Login(){\r\n    return(\r\n        <div style={{\r\n            backgroundColor: \"#fff\"\r\n          }} class=\"water-back col col-lg-6 col-md-6 hide-on-small-only\">\r\n \r\n <img class=\"responsive-img\" src=\"https://images.unsplash.com/photo-1548839140-29a749e1cf4d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=335&q=80\" />\r\n\r\n        \r\n           </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nfunction Water(){\r\n    return(\r\n        <div style={{\r\n            backgroundColor: \"#405C69\"\r\n          }} class=\"full-width col col-lg-6 col-md-6\">\r\n           <div class=\"container\">\r\n               <h1 class=\"white-text\">Login</h1>\r\n    <form style={{padding:\"5px 25px\", backgroundColor:\"#EAEFF9\"}} >\r\n     \r\n    <div class=\"row\">\r\n\r\n    <div class=\"input-field\">\r\n          <i class=\"material-icons prefix\">account_circle</i>\r\n          <input id=\"icon_prefix\" type=\"text\" class=\"validate\" />\r\n          <label for=\"icon_prefix\">Username</label>\r\n        </div>\r\n    </div>\r\n        <div class=\"row\">\r\n        <div class=\"input-field\">\r\n          <i class=\"material-icons prefix\">account_circle</i>\r\n          <input id=\"icon_prefix\" type=\"password\" class=\"validate\" />\r\n          <label for=\"icon_prefix\">Password</label>\r\n        </div>\r\n        </div>\r\n        \r\n     <div class=\"row\">\r\n         <div class=\"col s12 m12 l12 xl12\">\r\n         <a style={{backgroundColor:\"#405C69\"}} class=\"col s4 m4 l4 xl4 waves-effect waves-light white-text btn\">Login</a>\r\n         <p>Or Login using</p>\r\n         <div class=\"row col offset-s5 offset-m5 offset-l5 offset-xl5\">\r\n         <i style={{padding:\"0 5px\"}} class=\"material-icons\">add</i>\r\n         <i style={{padding:\"0 5px\"}} class=\"material-icons\">add_a_photo</i>\r\n         <i style={{padding:\"0 5px\"}} class=\"material-icons\">add_alarm</i>\r\n         </div>\r\n         </div>\r\n     \r\n     </div>\r\n    </form>\r\n    </div>\r\n           </div>\r\n    );\r\n}\r\n\r\nexport default Water;\r\n","import React from 'react';\r\nimport Login from './Login';\r\nimport Water from './Water';\r\nfunction Main(){\r\n    return(\r\n        <div>\r\n        <nav class=\"black\">\r\n        <div  class=\"container nav-wrapper\">\r\n          <a href=\"#\" class=\"brand-logo\">Logo</a>\r\n          <ul id=\"nav-mobile\" class=\"right hide-on-med-and-down\">\r\n            <li><a href=\"sass.html\">Login</a></li>\r\n        \r\n          </ul>\r\n        </div>\r\n      </nav>\r\n          <div  class=\"container mt-5 center\">\r\n         <div class=\"row\">\r\n         <Login />\r\n         <Water />\r\n       \r\n         </div>\r\n    \r\n         <div style={{height:\"5px\", margin:\"0 20%\"}} class=\"blue\"></div>\r\n          </div>\r\n    \r\n          <div>\r\n            <h1 class=\"center grey-text\">@designed by Marees</h1>\r\n          </div>\r\n        \r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport Main from './Components/Landing/Main';\nimport './App.css';\nimport './index.css';\n\nimport Button from 'react-bootstrap/Button'\nfunction App() {\n  return (\n    <div>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'materialize-css/dist/css/materialize.min.css';\n\nReactDOM.render(\n\n  <React.StrictMode>\n    \n    <App />\n\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}